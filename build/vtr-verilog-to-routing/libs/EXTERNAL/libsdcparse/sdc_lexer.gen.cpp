#line 2 "/home/nouran/OpenFPGA/build/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/sdc_lexer.gen.cpp"

#line 4 "/home/nouran/OpenFPGA/build/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/sdc_lexer.gen.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define sdcparse__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer sdcparse__create_buffer
#endif

#ifdef yy_delete_buffer
#define sdcparse__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer sdcparse__delete_buffer
#endif

#ifdef yy_scan_buffer
#define sdcparse__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer sdcparse__scan_buffer
#endif

#ifdef yy_scan_string
#define sdcparse__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string sdcparse__scan_string
#endif

#ifdef yy_scan_bytes
#define sdcparse__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes sdcparse__scan_bytes
#endif

#ifdef yy_init_buffer
#define sdcparse__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer sdcparse__init_buffer
#endif

#ifdef yy_flush_buffer
#define sdcparse__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer sdcparse__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define sdcparse__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state sdcparse__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define sdcparse__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer sdcparse__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define sdcparse_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state sdcparse_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define sdcparse_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state sdcparse_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define sdcparse_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack sdcparse_ensure_buffer_stack
#endif

#ifdef yylex
#define sdcparse_lex_ALREADY_DEFINED
#else
#define yylex sdcparse_lex
#endif

#ifdef yyrestart
#define sdcparse_restart_ALREADY_DEFINED
#else
#define yyrestart sdcparse_restart
#endif

#ifdef yylex_init
#define sdcparse_lex_init_ALREADY_DEFINED
#else
#define yylex_init sdcparse_lex_init
#endif

#ifdef yylex_init_extra
#define sdcparse_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra sdcparse_lex_init_extra
#endif

#ifdef yylex_destroy
#define sdcparse_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy sdcparse_lex_destroy
#endif

#ifdef yyget_debug
#define sdcparse_get_debug_ALREADY_DEFINED
#else
#define yyget_debug sdcparse_get_debug
#endif

#ifdef yyset_debug
#define sdcparse_set_debug_ALREADY_DEFINED
#else
#define yyset_debug sdcparse_set_debug
#endif

#ifdef yyget_extra
#define sdcparse_get_extra_ALREADY_DEFINED
#else
#define yyget_extra sdcparse_get_extra
#endif

#ifdef yyset_extra
#define sdcparse_set_extra_ALREADY_DEFINED
#else
#define yyset_extra sdcparse_set_extra
#endif

#ifdef yyget_in
#define sdcparse_get_in_ALREADY_DEFINED
#else
#define yyget_in sdcparse_get_in
#endif

#ifdef yyset_in
#define sdcparse_set_in_ALREADY_DEFINED
#else
#define yyset_in sdcparse_set_in
#endif

#ifdef yyget_out
#define sdcparse_get_out_ALREADY_DEFINED
#else
#define yyget_out sdcparse_get_out
#endif

#ifdef yyset_out
#define sdcparse_set_out_ALREADY_DEFINED
#else
#define yyset_out sdcparse_set_out
#endif

#ifdef yyget_leng
#define sdcparse_get_leng_ALREADY_DEFINED
#else
#define yyget_leng sdcparse_get_leng
#endif

#ifdef yyget_text
#define sdcparse_get_text_ALREADY_DEFINED
#else
#define yyget_text sdcparse_get_text
#endif

#ifdef yyget_lineno
#define sdcparse_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno sdcparse_get_lineno
#endif

#ifdef yyset_lineno
#define sdcparse_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno sdcparse_set_lineno
#endif

#ifdef yyget_column
#define sdcparse_get_column_ALREADY_DEFINED
#else
#define yyget_column sdcparse_get_column
#endif

#ifdef yyset_column
#define sdcparse_set_column_ALREADY_DEFINED
#else
#define yyset_column sdcparse_set_column
#endif

#ifdef yywrap
#define sdcparse_wrap_ALREADY_DEFINED
#else
#define yywrap sdcparse_wrap
#endif

#ifdef yyalloc
#define sdcparse_alloc_ALREADY_DEFINED
#else
#define yyalloc sdcparse_alloc
#endif

#ifdef yyrealloc
#define sdcparse_realloc_ALREADY_DEFINED
#else
#define yyrealloc sdcparse_realloc
#endif

#ifdef yyfree
#define sdcparse_free_ALREADY_DEFINED
#else
#define yyfree sdcparse_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sdcparse_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 47
#define YY_END_OF_BUFFER 48
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[325] =
    {   0,
        0,    0,   48,   46,    4,    3,   46,    1,   40,   40,
       46,   40,   40,   38,   40,   40,   42,   40,   43,   40,
       40,   40,   44,   45,    4,    3,    1,   40,    0,   40,
        0,   38,    0,   40,   38,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   39,   39,
        0,   40,   40,    0,    2,    0,   40,   40,   40,    0,
        0,   41,    0,   40,    0,   39,    0,   39,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   30,   40,    0,   39,   39,   39,
        2,   40,   40,   40,    0,   40,    0,   39,   40,   39,

       40,   40,   40,   40,   40,   40,   40,   40,   25,   26,
       40,   40,   40,   40,   40,   40,   40,    0,   40,   40,
       40,   41,   40,    0,   40,   40,   40,   40,   29,   40,
       32,   34,   22,   40,   40,   40,   40,   40,   40,    0,
       39,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,    0,   40,   24,   33,   40,   28,   40,   40,   31,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,    0,   40,   40,
       40,   21,   37,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,    0,

       40,   40,   40,   40,   39,   40,   40,   40,   20,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   39,
       40,   40,   40,   23,   40,   19,   40,   17,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   27,   36,
       40,   18,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   35,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,    5,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   10,   11,   40,   40,   40,   40,   40,   40,
       40,    9,   40,   40,   40,   40,   40,   40,   40,   40,

        6,   40,   40,   40,    8,   40,   40,   40,   40,    7,
       40,   14,   40,   40,   40,   16,   40,   15,   40,   40,
       12,   40,   13,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    5,    6,    1,    1,    1,    7,
        8,    9,   10,    1,   11,   12,    6,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    6,    1,    1,
        1,    1,    1,    1,   14,   15,   15,   15,   16,   17,
       15,   15,   18,   15,   15,   15,   15,   19,   15,   15,
       15,   15,   20,   21,   15,   15,   20,   15,   22,   15,
       23,   24,   25,    6,   26,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   15,   36,   37,   38,   39,
       40,   41,   15,   42,   43,   44,   45,   46,   47,   48,
       49,   15,   50,    6,   51,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[52] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    3,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        3,    3,    3,    3,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        5
    } ;

static const flex_int16_t yy_base[331] =
    {   0,
        0,    0,  698,  699,  695,  692,  692,    0,  671,   39,
       41,   65,   42,   44,   45,   44,  699,   70,  699,   38,
       56,   58,   64,  699,  691,  699,    0,  669,  678,  667,
      676,   79,   51,   88,  101,   97,   96,   59,   95,   98,
       82,  102,  103,  108,  111,  118,  105,  120,  137,  135,
      144,  129,  140,  167,  684,  684,  133,  100,  139,  163,
      165,  170,  160,  663,  672,  161,  158,  165,  176,  157,
      153,  159,   40,  168,  172,  161,  174,  177,  180,  179,
      182,  181,  183,  184,  661,  186,  670,  669,  210,  208,
      699,  197,  187,  211,  209,  699,  217,  204,  223,  225,

      212,  218,  217,  220,  221,  227,  228,  230,  658,  657,
      232,  239,  229,  233,  243,  244,  250,  671,  247,  245,
      269,  699,  699,  257,  254,  248,  256,  258,  655,  259,
      654,  653,  652,  260,  270,  265,  279,  288,  294,  666,
      665,  264,  291,  292,  293,  296,  298,  295,  310,  301,
      300,  308,  317,  649,  648,  313,  647,  318,  321,  646,
      319,  325,  331,  271,  316,  334,  337,  335,  338,  336,
      343,  340,  339,  344,  345,  341,  346,  349,  363,  365,
      366,  645,  644,  348,  350,  368,  369,  372,  373,  375,
      379,  382,  381,  384,  387,  388,  389,  394,  392,  396,

      397,  398,  399,  400,  643,  402,  405,  407,  625,  408,
      413,  409,  419,  417,  423,  424,  429,  418,  432,  699,
      433,  434,  435,  622,  436,  621,  439,  620,  443,  444,
      447,  449,  454,  455,  445,  456,  457,  460,  619,  618,
      464,  617,  465,  466,  471,  469,  468,  478,  472,  480,
      481,  616,  488,  485,  490,  491,  493,  495,  497,  502,
      508,  503,  510,  511,  615,  513,  500,  514,  515,  516,
      519,  522,  523,  524,  526,  527,  525,  531,  532,  529,
      542,  546,  614,  612,  543,  544,  545,  552,  555,  554,
      557,  611,  556,  559,  561,  563,  560,  568,  566,  569,

      610,  575,  576,  577,  608,  578,  579,  584,  585,  601,
      586,  599,  591,  595,  588,  528,  590,  473,  596,  592,
      315,  597,   62,  699,  646,  649,  651,  655,  658,  662
    } ;

static const flex_int16_t yy_def[331] =
    {   0,
      324,    1,  324,  324,  324,  324,  324,  325,  326,  327,
      324,  326,  326,  324,  326,  326,  324,  326,  324,  326,
      326,  326,  328,  324,  324,  324,  325,  326,  324,  329,
      324,  324,  324,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  324,
      324,  326,  326,  324,  324,  324,  326,  326,  326,  328,
      328,  328,  324,  329,  324,  324,  324,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  324,  324,  326,  326,
      324,  326,  326,  326,  324,  324,  324,  324,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  330,  326,  326,
      326,  324,  324,  324,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  330,
      330,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  324,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  324,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  324,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  324,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,

      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,    0,  324,  324,  324,  324,  324,  324
    } ;

static const flex_int16_t yy_nxt[751] =
    {   0,
        4,    5,    6,    7,    8,    9,    4,    4,   10,   11,
       12,   13,   14,    9,    9,    9,    9,   15,   16,    9,
        9,    9,   17,   18,   19,    9,    9,    9,   20,    9,
        9,    9,   21,    9,   15,    9,    9,    9,   16,    9,
        9,    9,   22,    9,    9,    9,    9,    9,    9,   23,
       24,   28,   31,   32,   49,   50,   32,   53,   33,   51,
       29,   29,   29,   52,   29,   61,   29,   29,  104,   67,
       53,   54,   55,   56,   51,   33,   34,   35,   29,   57,
       29,   29,   36,   52,   29,   72,   58,   29,   59,   67,
       50,   32,   29,   37,   51,   38,   39,   40,   41,   36,

       49,   42,   43,   44,   29,   45,   73,   46,   47,   51,
       29,   48,   68,   35,   62,   52,   69,   29,   29,   29,
       29,   76,   29,   29,   29,   29,   70,   29,   77,   78,
       29,   69,   71,   29,   80,   52,   74,   79,   81,   75,
       29,   82,   29,   93,   85,   89,   86,   66,   83,   49,
       51,   29,   69,   87,   87,   29,   88,   84,   90,   29,
       89,   29,   29,   92,   95,   51,   61,   69,   54,   55,
       56,   95,   63,   66,   98,   29,   51,   49,   90,   29,
       69,   29,   94,   29,   96,   87,   99,   29,  100,   98,
       29,   51,  102,  101,   29,   69,   29,  107,   29,   29,

      103,   29,   29,   29,   29,   29,   29,  105,   29,   29,
       95,  106,  120,   62,  118,   62,  111,  108,  110,   29,
       62,  124,  113,  119,  109,  112,  114,  117,  115,   97,
       29,  116,   29,   29,   29,  100,  121,  100,  124,   29,
       29,  123,   29,   29,  117,   29,  126,   29,  125,   29,
       29,   29,   29,  127,   29,   29,  128,  131,  129,  122,
      132,   29,  133,  135,  134,   29,   29,   29,  139,   29,
       29,  130,   29,  143,  138,  152,   29,  136,   29,  153,
       29,   29,   29,  154,  137,  144,   29,   29,  139,  158,
      142,   29,   29,   29,  164,  152,  186,  145,  146,  157,

      147,   29,  156,  148,  155,  160,  149,  161,  150,  159,
       29,  163,  151,   29,   29,   29,   29,   29,   29,  162,
       29,  165,   29,   29,  171,  178,  167,  166,  163,  169,
      170,  168,   29,  172,  177,   29,  173,   29,   29,   29,
       29,   29,  178,   29,  174,  176,  179,   29,  181,  183,
      182,  185,  187,   29,  175,  180,   29,   29,   29,   29,
       29,   29,   29,   29,  184,   29,   29,   29,   29,  200,
       29,  205,   29,  188,  185,  189,  190,  191,  192,  193,
      194,  197,  196,  199,  198,   29,  195,   29,   29,  204,
       29,   29,  200,  201,   29,   29,  206,   29,  205,  202,

      208,   29,  203,   29,   29,  207,   29,  211,  212,   29,
       29,   29,  215,  216,   29,  209,   29,  220,  210,   29,
       29,   29,   29,  213,   29,  223,  219,   29,  214,   29,
       29,   29,  217,  221,  218,   29,  230,  224,  225,   29,
       29,   29,  227,  222,  220,   29,   29,  226,  229,  231,
      228,   29,  233,  234,   29,   29,   29,   29,   29,  238,
      232,   29,  236,  235,  239,   29,   29,   29,  243,   29,
      237,   29,  245,  249,  246,  241,   29,   29,   29,   29,
      244,  242,   29,  240,  247,  248,   29,   29,   29,  251,
       29,   29,  253,   29,   29,   29,  257,  254,  259,  250,

       29,  255,   29,   29,  260,  263,  264,   29,  252,  256,
       29,  258,   29,   29,  261,   29,  267,   29,  269,   29,
      262,  270,   29,  265,   29,   29,  266,  271,  272,  268,
       29,  274,   29,   29,  273,   29,   29,   29,   29,  275,
      276,   29,  279,  278,   29,   29,   29,   29,   29,   29,
       29,   29,  277,   29,   29,  282,  286,  287,  280,  281,
      285,  289,  290,  291,   29,   29,   29,   29,   29,  288,
      283,  284,  293,  294,   29,  292,   29,   29,   29,   29,
      295,   29,   29,   29,  302,   29,  296,  303,   29,  304,
       29,   29,  297,  298,  300,  299,  306,   29,   29,   29,

       29,   29,  305,  308,  301,  313,   29,   29,   29,  307,
       29,  315,   29,   29,   29,  309,  316,   29,   29,   29,
      311,   29,  314,   29,  310,  317,  312,  318,  320,  321,
       29,  319,   29,   29,   29,  322,   29,   29,   29,   29,
       29,   29,   29,   29,   29,  323,   27,   29,   27,   27,
       27,   28,   28,   30,   30,   60,   60,   60,   60,   60,
       64,   64,  140,  140,  140,   29,   29,   29,   29,   29,
       29,   29,  141,  141,   29,   29,   29,   29,  141,   29,
       29,   88,   88,   29,   97,   65,   91,   91,   66,   65,
       63,   29,   25,   29,   26,   26,   25,  324,    3,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324
    } ;

static const flex_int16_t yy_chk[751] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   10,   11,   11,   13,   14,   14,   16,   11,   14,
       20,   10,   73,   15,   13,   23,   16,   15,   73,   33,
       16,   18,   18,   18,   14,   11,   12,   12,   21,   20,
       22,   38,   12,   15,  323,   38,   21,   12,   22,   33,
       32,   32,   18,   12,   32,   12,   12,   12,   12,   12,

       34,   12,   12,   12,   41,   12,   38,   12,   12,   32,
       34,   12,   35,   35,   23,   36,   35,   39,   37,   36,
       40,   41,   58,   35,   42,   43,   37,   47,   42,   43,
       44,   35,   37,   45,   44,   36,   39,   43,   44,   40,
       46,   45,   48,   58,   47,   52,   48,   50,   46,   49,
       50,   52,   49,   51,   51,   57,   51,   46,   53,   49,
       52,   59,   53,   57,   60,   50,   61,   49,   54,   54,
       54,   62,   63,   66,   67,   71,   66,   68,   53,   70,
       68,   72,   59,   76,   63,   69,   69,   68,   69,   67,
       74,   66,   71,   70,   75,   68,   77,   76,   69,   78,

       72,   80,   79,   82,   81,   83,   84,   74,   86,   93,
       95,   75,   93,   60,   90,   61,   80,   77,   79,   92,
       62,   98,   82,   92,   78,   81,   83,   89,   84,   97,
       90,   86,   89,   94,  101,   99,   94,  100,   98,  103,
      102,   97,  104,  105,   89,   99,  102,  100,  101,  106,
      107,  113,  108,  103,  111,  114,  104,  107,  105,   95,
      108,  112,  111,  113,  112,  115,  116,  120,  117,  119,
      126,  106,  117,  120,  116,  124,  125,  114,  127,  125,
      128,  130,  134,  126,  115,  120,  142,  136,  117,  134,
      119,  121,  135,  164,  142,  124,  164,  121,  121,  130,

      121,  137,  128,  121,  127,  136,  121,  137,  121,  135,
      138,  139,  121,  143,  144,  145,  139,  148,  146,  138,
      147,  143,  151,  150,  147,  152,  144,  143,  139,  145,
      146,  144,  149,  148,  151,  156,  149,  321,  165,  153,
      158,  161,  152,  159,  149,  150,  153,  162,  158,  161,
      159,  163,  165,  163,  149,  156,  166,  168,  170,  167,
      169,  173,  172,  176,  162,  171,  174,  175,  177,  178,
      184,  185,  185,  166,  163,  167,  168,  169,  170,  171,
      172,  175,  174,  177,  176,  179,  173,  180,  181,  184,
      186,  187,  178,  179,  188,  189,  186,  190,  185,  180,

      188,  191,  181,  193,  192,  187,  194,  191,  192,  195,
      196,  197,  195,  196,  199,  189,  198,  200,  190,  201,
      202,  203,  204,  193,  206,  203,  199,  207,  194,  208,
      210,  212,  197,  201,  198,  211,  212,  204,  206,  214,
      218,  213,  208,  202,  200,  215,  216,  207,  211,  213,
      210,  217,  215,  216,  219,  221,  222,  223,  225,  221,
      214,  227,  218,  217,  222,  229,  230,  235,  229,  231,
      219,  232,  231,  235,  232,  225,  233,  234,  236,  237,
      230,  227,  238,  223,  233,  234,  241,  243,  244,  237,
      247,  246,  241,  245,  249,  318,  244,  243,  246,  236,

      248,  243,  250,  251,  247,  250,  251,  254,  238,  243,
      253,  245,  255,  256,  248,  257,  255,  258,  257,  259,
      249,  258,  267,  253,  260,  262,  254,  259,  260,  256,
      261,  262,  263,  264,  261,  266,  268,  269,  270,  263,
      264,  271,  268,  267,  272,  273,  274,  277,  275,  276,
      316,  280,  266,  278,  279,  271,  275,  276,  269,  270,
      274,  278,  279,  280,  281,  285,  286,  287,  282,  277,
      272,  273,  282,  285,  288,  281,  290,  289,  293,  291,
      286,  294,  297,  295,  294,  296,  287,  295,  299,  296,
      298,  300,  288,  289,  291,  290,  298,  302,  303,  304,

      306,  307,  297,  300,  293,  307,  308,  309,  311,  299,
      315,  309,  317,  313,  320,  302,  311,  314,  319,  322,
      304,  312,  308,  310,  303,  313,  306,  314,  317,  319,
      305,  315,  301,  292,  284,  320,  283,  265,  252,  242,
      240,  239,  228,  226,  224,  322,  325,  209,  325,  325,
      325,  326,  326,  327,  327,  328,  328,  328,  328,  328,
      329,  329,  330,  330,  330,  205,  183,  182,  160,  157,
      155,  154,  141,  140,  133,  132,  131,  129,  118,  110,
      109,   88,   87,   85,   65,   64,   56,   55,   31,   30,
       29,   28,   25,    9,    7,    6,    5,    3,  324,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[48] =
    {   0,
0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
#line 2 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
    /*
     * Include Files
     */
    #include "sdcparse.hpp"
    #include "sdc_common.hpp"
    #include "sdc_error.hpp"

    #include "sdc_lexer.hpp"

#line 940 "/home/nouran/OpenFPGA/build/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/sdc_lexer.gen.cpp"
/*
 * Options
 */
/* track line numbers*/
/* No lexing accross files */
/* unistd.h doesn't exist on windows */
#define YY_NO_UNISTD_H 1
/* Avoid unused yyunput function warning */
/* Avoid unused yyinput function warning */
#define YY_NO_INPUT 1
/* isatty() doesn't exist on windows */
/* no default rule to echo unrecongaized tokens to output */
/*%option bison-bridge*/
/*
 * Use a prefix to avoid name clashes with other
 * flex lexers
 */
/* Common character classes */
/*
 * Symbol Definitions
 */
#line 962 "/home/nouran/OpenFPGA/build/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/sdc_lexer.gen.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 70 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"

#line 1222 "/home/nouran/OpenFPGA/build/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/sdc_lexer.gen.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 325 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 324 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 71 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ /* skip comments */ }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 72 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ /* line continuation don't send EOL to parser */ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 73 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_EOL(); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 74 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ /* skip white space */ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 76 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_CREATE_CLOCK(); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 77 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_INPUT_DELAY(); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_OUTPUT_DELAY(); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 79 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_CLOCK_GROUPS(); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 80 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_FALSE_PATH(); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 81 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_MAX_DELAY(); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 82 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_MIN_DELAY(); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_MULTICYCLE_PATH(); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 84 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_CLOCK_UNCERTAINTY(); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 85 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_CLOCK_LATENCY(); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 86 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_DISABLE_TIMING(); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 87 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_SET_TIMING_DERATE(); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 89 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_GET_PORTS(); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 90 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_GET_CLOCKS(); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 91 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_GET_CELLS(); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 92 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_CMD_GET_PINS(); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 94 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_PERIOD(); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 95 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_NAME(); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 96 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_WAVEFORM(); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 97 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_CLOCK(); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 98 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_MAX(); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 99 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_MIN(); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 100 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_EXCLUSIVE(); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 101 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_GROUP(); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 102 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_FROM(); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 103 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_TO(); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 104 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_SETUP(); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 105 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_HOLD(); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 106 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_EARLY(); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 107 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_LATE(); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 108 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_CELL_DELAY(); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 109 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_NET_DELAY(); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 110 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_ARG_SOURCE(); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 112 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_INT_NUMBER(atoi(sdcparse_get_text(yyscanner))); }
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 113 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_FLOAT_NUMBER(atof(sdcparse_get_text(yyscanner))); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 114 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ 
                                  return sdcparse::Parser::make_STRING(sdcparse_get_text(yyscanner)); 
                                }
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 117 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{
                                  /*
                                   * Any continguous sequence of non-white space characters, 
                                   * with optional leading and/or trailing whitespace that falls
                                   * insde curly braces is interpreted as an escaped string.  
                                   * However when we set the yylval, we need to be careful
                                   * to avoid including the curly braces and the leading/trailing
                                   * white-space.
                                   */
                                  size_t len = strlen(sdcparse_get_text(yyscanner));
                                  char* tmp_str = sdcparse::strndup(sdcparse_get_text(yyscanner)+1, len-2); //Duplicate and trim braces

                                  char* modified_str = tmp_str; //Save the original tmp_str for freeing

                                  //Remove leading whitespace
                                  while(isspace(*modified_str)) modified_str++;

                                  //Find trailing whitespace
                                  char* tmp_ptr = modified_str;
                                  while(!isspace(*tmp_ptr) && *tmp_ptr != '\0') {
                                      tmp_ptr++;
                                  }
                                  
                                  //Remove trailing white space
                                  //
                                  //tmp_ptr is now at the first trailing white space character
                                  //(or the existing null terminator), so we can write a '\0' 
                                  //to terminate the string here.
                                  *tmp_ptr = '\0';

                                  auto ret = sdcparse::Parser::make_ESCAPED_STRING(modified_str);

                                  //Clean-up the temporary string
                                  free(tmp_str);

                                  return ret; 
                                }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 154 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_LSPAR(); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 155 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_RSPAR(); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 156 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_LCPAR(); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 157 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ return sdcparse::Parser::make_RCPAR(); }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 158 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ /* If the file has no blank line at the end there will
                                     not be the expected EOL following the last command. 
                                     So first time through, return EOL, and subsequently 
                                     return 0 (which indicated end of file). This ensures
                                     there will always be an EOL provided to the parser. 
                                     However it may also generate a stray EOL if the last
                                     line IS blank - so the parse must handle those correctly. */
                                  static bool once; return (once = !once) ? sdcparse::Parser::make_EOL() : sdcparse::Parser::make_EOF();
                                }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 167 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
{ 
                                  sdc_error_wrap(callback, sdcparse_get_lineno(yyscanner), sdcparse_get_text(yyscanner), "Unrecognized character"); 
                                }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 170 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1578 "/home/nouran/OpenFPGA/build/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/sdc_lexer.gen.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 325 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 325 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 324);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 170 "/home/nouran/OpenFPGA/vtr-verilog-to-routing/libs/EXTERNAL/libsdcparse/src/sdc_lexer.l"


