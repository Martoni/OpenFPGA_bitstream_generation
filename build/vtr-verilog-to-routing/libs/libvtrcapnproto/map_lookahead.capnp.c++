// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: map_lookahead.capnp

#include "map_lookahead.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<50> b_8f06f64392e179fe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    254, 121, 225, 146,  67, 246,   6, 143,
     20,   0,   0,   0,   1,   0,   1,   0,
     44, 234, 196, 254, 128, 154, 123, 148,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 112,  95, 108, 111, 111, 107,
     97, 104, 101,  97, 100,  46,  99,  97,
    112, 110, 112,  58,  86, 112, 114,  77,
     97, 112,  67, 111, 115, 116,  69, 110,
    116, 114, 121,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    100, 101, 108,  97, 121,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 103, 101, 115, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f06f64392e179fe = b_8f06f64392e179fe.words;
#if !CAPNP_LITE
static const uint16_t m_8f06f64392e179fe[] = {1, 0};
static const uint16_t i_8f06f64392e179fe[] = {0, 1};
const ::capnp::_::RawSchema s_8f06f64392e179fe = {
  0x8f06f64392e179fe, b_8f06f64392e179fe.words, 50, nullptr, m_8f06f64392e179fe,
  0, 2, i_8f06f64392e179fe, nullptr, nullptr, { &s_8f06f64392e179fe, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<46> b_f397cf2f62d4f7dd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    221, 247, 212,  98,  47, 207, 151, 243,
     20,   0,   0,   0,   1,   0,   0,   0,
     44, 234, 196, 254, 128, 154, 123, 148,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 112,  95, 108, 111, 111, 107,
     97, 104, 101,  97, 100,  46,  99,  97,
    112, 110, 112,  58,  86, 112, 114,  77,
     97, 112,  76, 111, 111, 107,  97, 104,
    101,  97, 100,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 115, 116,  77,  97, 112,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     50, 246,  58,  81,  86, 153, 123, 175,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     50, 246,  58,  81,  86, 153, 123, 175,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    254, 121, 225, 146,  67, 246,   6, 143,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f397cf2f62d4f7dd = b_f397cf2f62d4f7dd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f397cf2f62d4f7dd[] = {
  &s_af7b9956513af632,
};
static const uint16_t m_f397cf2f62d4f7dd[] = {0};
static const uint16_t i_f397cf2f62d4f7dd[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_f397cf2f62d4f7dd[] = {
  { 16777216,  ::Matrix< ::VprMapCostEntry>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_f397cf2f62d4f7dd = {
  0xf397cf2f62d4f7dd, b_f397cf2f62d4f7dd.words, 46, d_f397cf2f62d4f7dd, m_f397cf2f62d4f7dd,
  1, 1, i_f397cf2f62d4f7dd, nullptr, nullptr, { &s_f397cf2f62d4f7dd, nullptr, bd_f397cf2f62d4f7dd, 0, sizeof(bd_f397cf2f62d4f7dd) / sizeof(bd_f397cf2f62d4f7dd[0]), nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// VprMapCostEntry
constexpr uint16_t VprMapCostEntry::_capnpPrivate::dataWordSize;
constexpr uint16_t VprMapCostEntry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind VprMapCostEntry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VprMapCostEntry::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// VprMapLookahead
constexpr uint16_t VprMapLookahead::_capnpPrivate::dataWordSize;
constexpr uint16_t VprMapLookahead::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind VprMapLookahead::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* VprMapLookahead::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



