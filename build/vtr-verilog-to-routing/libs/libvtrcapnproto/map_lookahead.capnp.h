// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: map_lookahead.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 9001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "matrix.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(8f06f64392e179fe);
CAPNP_DECLARE_SCHEMA(f397cf2f62d4f7dd);

}  // namespace schemas
}  // namespace capnp


struct VprMapCostEntry {
  VprMapCostEntry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8f06f64392e179fe, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VprMapLookahead {
  VprMapLookahead() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f397cf2f62d4f7dd, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class VprMapCostEntry::Reader {
public:
  typedef VprMapCostEntry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getDelay() const;

  inline float getCongestion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VprMapCostEntry::Builder {
public:
  typedef VprMapCostEntry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getDelay();
  inline void setDelay(float value);

  inline float getCongestion();
  inline void setCongestion(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VprMapCostEntry::Pipeline {
public:
  typedef VprMapCostEntry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VprMapLookahead::Reader {
public:
  typedef VprMapLookahead Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCostMap() const;
  inline  ::Matrix< ::VprMapCostEntry>::Reader getCostMap() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VprMapLookahead::Builder {
public:
  typedef VprMapLookahead Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCostMap();
  inline  ::Matrix< ::VprMapCostEntry>::Builder getCostMap();
  inline void setCostMap( ::Matrix< ::VprMapCostEntry>::Reader value);
  inline  ::Matrix< ::VprMapCostEntry>::Builder initCostMap();
  inline void adoptCostMap(::capnp::Orphan< ::Matrix< ::VprMapCostEntry>>&& value);
  inline ::capnp::Orphan< ::Matrix< ::VprMapCostEntry>> disownCostMap();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VprMapLookahead::Pipeline {
public:
  typedef VprMapLookahead Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Matrix< ::VprMapCostEntry>::Pipeline getCostMap();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float VprMapCostEntry::Reader::getDelay() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float VprMapCostEntry::Builder::getDelay() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VprMapCostEntry::Builder::setDelay(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float VprMapCostEntry::Reader::getCongestion() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float VprMapCostEntry::Builder::getCongestion() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void VprMapCostEntry::Builder::setCongestion(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool VprMapLookahead::Reader::hasCostMap() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VprMapLookahead::Builder::hasCostMap() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Matrix< ::VprMapCostEntry>::Reader VprMapLookahead::Reader::getCostMap() const {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprMapCostEntry>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Matrix< ::VprMapCostEntry>::Builder VprMapLookahead::Builder::getCostMap() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprMapCostEntry>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Matrix< ::VprMapCostEntry>::Pipeline VprMapLookahead::Pipeline::getCostMap() {
  return  ::Matrix< ::VprMapCostEntry>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void VprMapLookahead::Builder::setCostMap( ::Matrix< ::VprMapCostEntry>::Reader value) {
  ::capnp::_::PointerHelpers< ::Matrix< ::VprMapCostEntry>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Matrix< ::VprMapCostEntry>::Builder VprMapLookahead::Builder::initCostMap() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprMapCostEntry>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VprMapLookahead::Builder::adoptCostMap(
    ::capnp::Orphan< ::Matrix< ::VprMapCostEntry>>&& value) {
  ::capnp::_::PointerHelpers< ::Matrix< ::VprMapCostEntry>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Matrix< ::VprMapCostEntry>> VprMapLookahead::Builder::disownCostMap() {
  return ::capnp::_::PointerHelpers< ::Matrix< ::VprMapCostEntry>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

